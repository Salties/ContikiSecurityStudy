PhD First Year Report:
Information Leakage on Encrypted Network
Traffic
Yan Yan
April 6, 2015

Contents
1 Introduction
1.1 Cryptography and Side Channel Attacks
1.2 Network Traffic . . . . . . . . . . . . . .
1.3 Side Channel Information in Packets . .
1.4 Motivation and Challenges . . . . . . . .

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

2
2
3
4
5

2 Literature Review

7

3 Progress To Date

8

4 Toys
4.1 Odd or Even . . . . . . . . . . . . . . . . . . . . . . .
4.1.1 Description . . . . . . . . . . . . . . . . . . .
4.1.2 Analysis [To be completed...] . . . . . . . . . .
4.2 Leaky Coffee . . . . . . . . . . . . . . . . . . . . . . .
4.2.1 Description . . . . . . . . . . . . . . . . . . .
4.3 Analysis of Leaky Coffee [to be completed] . . . . . .
4.3.1 Detect Session . . . . . . . . . . . . . . . . . .
4.3.2 Isolate A Session . . . . . . . . . . . . . . . .
4.3.3 Determine Packets in a Session . . . . . . . .
4.3.4 Guessing Plaintext by One Packet Length . .
4.3.5 Guessing Plaintext Using Joint Packet Length

.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.

9
9
10
10
11
11
15
15
15
15
16
22

5 Plan

24

A OrderF lavour-Length leakage channel

25

1

Chapter 1
Introduction
1.1

Cryptography and Side Channel Attacks

Cryptography derived from solving the problem of transmitting secret information through an insecure channel. The general principle in modern
cryptography is that the encryption and decryption algorithms are assumed
to be made public and the secrecy of messages is solely relied on the secrecy
of the key.
Under this assumption, cryptographic algorithms are then designed in
various ways. Some of them are derived from hard mathematical problems
such as Discrete Logarithm and Elliptic Curves. Provable Security provides
mathematical proofs by modelling the algorithms in an abstracted mathematical world and reduces them to hard problems; the secrecy of message is
then guaranteed as long as the underlying mathematical problems are not
solved.
However, when implemented in real world things can get out of control. Many factors considered difficult to be modelled mathematically can
sometimes be exploited to breach the security. For example, [6] describes
a method called Differential Power Analysis which recovers the secret key
using power traces measured during encryption; [2] and [8] shows that the
timing information can also reveal the secret key.

2

1.2

Network Traffic

The conceptional structure of today’s network is described in [4]. Generally
speaking, networks are formed by protocols which are standard agreements
implemented by nodes connected to the networks. Protocols are categorised
as a stack of layer with the lower ones handle the fussy transportation problems and the higher ones the more sophisticated functional problems.
Packet (or frame) is the unit of structured data transmitted through network at each layer. A typical format of packet is a protocol header followed by
its payload. The header constitutes of several fields which contain some meta
data of the packet while the payload is the actual data being transmitted.
Layer
High Application Layer
Secure Layer
Transport Layer
Network Layer
Data Link Layer
Low Physical Layer

Example Protocols
HTTP / SMTP / NTP
TLS / SSL / DTLS
TCP / UDP / SCTP
IPv4 / IPv6 / 6lowPAN
IEEE 802.3 / IEEE 802.11
Bluetooth / DSL

Table 1.1: A Simplified 6 Layer Model
Packet of protocols are organised recursively, i.e. headers of upper protocols is embedded into the payload of lower protocols. When a packet (or
frame) arrives a node on the network, the headers are decapsulated sequentially from the lowest layer to the highest. Conceptional speaking, the content
of a payload should be transparent to the protocols beneath. For instance,
a router may only decapsulate a packet no higher than IP layer and has no
concern about everything above.

3

IP payload
TCP payload
TLS payload

IP Header TCP Header

TLS Header

......

Figure 1.1: An example of headers and payloads
It might be difficult in real world to prevent a third party from seeing
a packet. For example, a packet from your laptop cannot reach Google
server without hopping between routers and hence any corrupted router may
breach the data; the enriching application of mobile devices made it even
more difficult as the radio signals from one’s smart phone can be captured
easily in a cafe.

1.3

Side Channel Information in Packets

Theoretically speaking, encryption can be applied at any layer of a network.
Lower the layer it is, more information is protected. However, the intense
requirement of efficiency and bandwidth have limited the usage of cryptography, like IPSec. A trade-off between security and efficiency must be made
and encryption at higher level protocol has eventuall adopted as a widely
accepted solution. As a result, TLS/SSL has became the most used security
protocol on Internet today.
The drawback, as mentioned above, is that all headers in the lower layers
will be transmitted in plaintext. Figure 1.2 is an example of a captured
DTLS packet.

4

Figure 1.2: A Wireshark Screenshot
As we can see in Figure 1.2, although the sniffer is not able to decrypt
the packet, all headers until DTLS are indeed accessible.

1.4

Motivation and Challenges

Comparing to other kinds of side channel information network traffic is a
relatively less studied subject despite the raising concern of Internet privacy.
The open nature of the development Internet of Things (IoT) also demands
more security and privacy measure. Unlike the stable and already-widelydeployed Internet, the structure of IoT network is still under a developing
process; therefore it might be worthwhile to take into concern the security
from a early stage.
One challenge in this project is the fundamental nature difference between network traffic and other physical side channel information. Many
side channel attacks are aimed to recover secret key materials, such as DPA
in [6], or Cache-timing Attack in [2] and [8].
Although it is not certain at this stage that whether there is a link between
the value of cryptographic key chosen and packet headers, but intuitively
they are more likely to be independent. The reason is that the cryptography
primitives chosen should only affect the value of ciphertext which constitutes
the payload; hence is expected to be transparent to the lower layer protocol
headers. However, the timing information might still be exploited to recover
the key material.
5

Different protocol suite result into different headers and hence different
information. As a beginning for this project, we choose to study the traffic
generated by a DTLS implementation called tinyDTLS [1]. tinyDTLS is
designed to be suitable for embedded systems and is one of the IoT candidates
in the future.

6

Chapter 2
Literature Review
Part of the related literatures are the RFC specifications1 . As of this project,
we tend to put our focus on the protocols from Network Layer to Secure
Layer in Table 1.1 as a consideration of generality. Therefore, the following
documents can be regarded as main references of protocol specifications:
• RFC 791 [5]:
RFC 791 is the IPv4 specification. IPv4 is the most widely deployed
protocol today. Even though its successor IPv6 has been proposed for
more than a decade, the replacing process is taking place very slowly.
It is expected that IPv4 will remain its dominance over the next few
years.
• RFC 2460 [3]:
RFC 2460 is the IPv6 specification. IPv6 is the successor of IPv4. It
was published in 1998 due to the exhaustion of IPv4 address. Although
kernels today usually support both IPv4 and IPv6, many applications
are still based on IPv4. However, as a “next generation” network,
many IoT manufacturers also have the trend of adopting IPv6 as their
standard.

1

http://www.ietf.org/rfc.html

7

Chapter 3
Progress To Date

8

Chapter 4
Toys
In this hello-world set-up, there is only one server and one client connected
through local-link. The protocol suit we adopted is: [IPv4 or IPv6] + UDP
+ DTLS.
All fiedls of UDP and DTLS header will be analysed.
Abbreviations:
CLIENT Client.
SERVER Server.
For the attack model, we define our adversary as a passive eavesdropper,
i.e.
• The adversary is allowed to use a sniffer to capture all packets transmitted between CLIENT and SERVER.
• Only DTLS payload is encrypted, all other contents of the packets are
captured in plaintext by the adversary.
• The adversary has specific pre-knowledge for each application, e.g.
the set of contents that could be transmitted between CLIENT and
SERVER, or some specific behaviour of CLIENT and SERVER.

4.1

Odd or Even

Odd or Even is an extremely simple toy application. It is designed to
demonstrate the fundamental idea of traffic analysis.
9

4.1.1

Description

CLIENT randomly generates a 32-bit unsigned integer R and sends it to
SERVER. SERVER replies with a string “ODD” or “EVEN” according to
the integer sent(Figure 4.1).

SERVER

CLIENT

32bit R

”ODD”/”EVEN”

Figure 4.1: Description of an Odd-or-Even session

4.1.2

Analysis [To be completed...]

For every Odd-or-Even session,
Packets from CLIENT to SERVER:
All fields for every packet are the same, except: 1. Encrypted Application
Data field in DTLS layer. 2. Sequence Number increased by 1 every packet.
3. Checksum in UDP layer.
Packets from SERVER to CLIENT:
All fields are the same for every packet except: 1. Encrypted Application
Data field in DTLS layer. 2. Sequence Number increased by 1 every packet.
3. Checksum in UDP layer. 4. Length field in both DTLS layer and UDP
layer. The values are always (20,41) respectively when data is ”Odd” and
(21,42) when data is ”Even”.
Therefore in this application, given pre-knowledge that server responds
with either ”Odd” or ”Even”, the length field in both DTLS layer and UDP
layer can directly leak the plaintext.

10

4.2
4.2.1

Leaky Coffee
Description

Leaky Coffee simulates the scenario that CLIENT initiates a Leaky-Coffee
session with a request to SERVER, SERVER replies with a response and
CLIENT then reacts according to the response.
Syntax
Definition 4.2.1. COFFEE is a set of strings defined as:
COF F EE = {”AMERICANO”, ”CAPPUCCINO”, ”ESPRESSO”, ”MOCHA”}
Definition 4.2.2. Let ’*’ represents SUGAR and ’@’ represents MILK respectively, we denote n∗ and n@ as the number of appearances of ’*’ and ’@’
in a string. We also call n∗ and n@ the degree of SUGAR and MILK of a
string.
Definition 4.2.3. We define a set of string ADDITIVE as:
ADDIT IV E = {{SU GAR, M ILK}0−6 |0 ≤ n∗ ≤ 3, 0 ≤ n@ ≤ 3}.
In another word, an instance of ADDITIVE contains no more than 3
SUGAR and MILK.
Leaky-Coffee Session
A Leaky-Coffee session can be described as in Figure 4.2:

11

SERVER

CLIENT

1. Order

2.Order||F lavour

If F lavour is not enough

3.F lavourRequest

4.F lavourResponse

Figure 4.2: Description of a Leaky-Coffee session
1 As an initiation of a conversation, CLIENT randomly picks a string Order ∈
COF F EE and sends it to SERVER.
2 Upon receiving an Order, SERVER replies with a string {Order||F lavour}
where F lavour ∈ ADDIT IV E and || represents concatenation. If
Order = ”ESPRESSO” then the degrees of both SUGAR and MILK
of Flavour are set to 0.
3 CLIENT randomly generates a SUGAR requirement r∗ ∈ [0, 3] and a
MILK requirement r@ ∈ [0, 3]. Then it scans the reply from 2 and computes its degrees of SUGAR and MILK. If any of the degrees does not
met the requirements, i.e. n∗ < r∗ and/or n@ < r@ , then CLIENT sends
a F lavourRequest = {”F LAV OU R”||{SU GAR}max(r∗ −n∗ ,0) ||M ILK max(r@ −n@ ,0) }.
4 If SERVER receives a F lavourRequest, it echoes back F lavourRequest
as its F lavourResponse, i.e. F lvaourResponse = F lavourRequest.
Note that the F lavourRequest and F lavourResponse packets are probabilistic in a Leaky-Coffee Session.
12

Example 4.2.1. An example with F lavourRequest and F lavourResponse(Figure 4.3):

CLIENT

SERVER

”MOCHA”

”MOCHA*@”

”FLAVOUR**@”

”FLAVOUR**@”

Figure 4.3: Example: A Leaky-Coffee session with F lavourRequest and
F lavourResponse
In this example, CLIENT first sends an Order “MOCHA”. SERVER
then replies with “MOCHA*@” which implies both the SUGAR degree and
MILK degree are 1. CLIENT randomly generates a SUGAR requirement 3
and MILK requirement 2 and then sends a F lavourRequest to request the
shorted SUGAR and MILK. SERVER finally response with the requested
13

ADDITIVE.
Example 4.2.2. Another example without F lavourRequest and F lavourResponse(Figure 4.4):

CLIENT

SERVER

”ESPRESSO”

”ESPRESSO”

Figure 4.4: Example: A Leaky-Coffee session without F lavourRequest and
F lavourResponse
This example demonstrates a session initiated with “ESPRESSO” where
no ADDITIVE will be added in the reply.
Implementation
SERVER listens to a fixed port (20220) while CLIENT assigns an ephemeral
port during each run, i.e. CLIENT’s port is selected at the beginning of each
run and remains constant during the life time of that instance.
In this experimental implementation, all random values are generated by
the Linux kernel random number generator(/dev/urandom); thus assumed
to be uniformly distributed.
After each session, CLIENT will be putted into sleep for a random period
from 5 to 15 seconds.
We used localloop as our network interface in our experiment; thus packet
loss is not considered. DTLS does implement retransmission at some level,
but since the sequence number in DTLS header does not change in the retransmitted packet so it is still seemingly possible to reconstruct the equivalent packet stream without any packet loss. Even though the reconstructed
14

stream will preserve all information in each header but the accurate time
stamps will be difficult to recover.

4.3
4.3.1

Analysis of Leaky Coffee [to be completed]
Detect Session

It is obvious that whenever there is a packet transmitted then there

4.3.2

Isolate A Session

Given the implementation, we can isolate a session from the packet stream by
analysing their time stamp. This is achieved by using a threshold value and
then compare it with the interval of two packets. If the interval is greater than
the threshold then we can guess these packets belong to different sessions.
Algorithm 1: IsSameSession
Input: threshold θ, time stamps of two continuous packets t1 , t2
Output: TRUE if the packets are of the same session, otherwise
FALSE
1 if θ > |t2 − t1 | then
2
return TRUE ;
3 else
4
return FALSE
5 end
In our implementation, a typical guess .By continuously applying Algorithm 1 on the duplex packet stream, we can easily isolate different sessions.

4.3.3

Determine Packets in a Session

Once a session has been isolated, it this not difficult to identify the type of
each packet in Leaky Coffee as there can only be two types of session:
1. Session with 4 packets: This type of session can be identified with
4 packets presented. Further more, those packets can be identified sequentially as: < Order, Order||F lavour, F lavourRequest, F lavourResponse >
respectively as well.

15

2. Session without FlavourRequest and FlavourResponse. 2 packets sessions can be identified as this type of session. Those packets can
then be identified as < Order, Order||F lavour > accordingly.

4.3.4

Guessing Plaintext by One Packet Length

In this implementation, assume we have the pre-knowledge that each Order ∈
COF F EE picked by CLIENT has an uniform distribution. Further from, the
degree of SUGAR and MILK also have uniform distributions over 0, 1, 2, 3.
Given these distributions, it is some how possible to make guesses of the
plaintext in the packets by the length given in DTLS header, or UDP header,
without trying to break the encryption primitives.
We denote the value of DTLS Length field as lD and the actual application
data length as l. Our experiment shows that:
l = lD − 17

(4.1)

under both IPv4 and IPv6.
Definition 4.3.1. For a specific packet in a session, let X be the set of
plaintext and Y be the set of its corresponding content length.
We model the plaintext and their corresponding content length (in bytes)
as a channel:
W (y|x), x ∈ X, y ∈ Y.
And then the inverse of this channel W −1 (x|y) can be viewed as the
leakage channel of Y.
The general idea is that with such leakage channel, an adversary can then
“decode” the plaintext using this leakage channel.
In this context, X is the set of packet content and Y the set of content
length l.
Example 4.3.1. We begin with a simple example: Order.
For Order packets, we have:

16

W (y|x)
5 8
”AMERICANO”
”CAPPUCINO”
”MOCHA”
1
”ESPRESSO”
1

9
1
1

P
1/4
1/4
1/4
1/4

Table 4.1: Content-Length Channel and the probabilities of Order
In this implementation, CLIENT randomly picks Order from COF F EE;
therefore the probability for every value is 1/4. Since neither DLTS nor the
application induces any randomness to the content length therefore it will
always be a deterministic value.
Given W and the probability of Order, it can then compute the joint
distribution of (Order, l) by:
(W P )(x, y) = P (x)W (y|x)
WP
(”AMERICANO”,9)
(”CAPPUCINO”,9)
(”MOCHA”,5)
(”ESPRESSO”,8)

(4.2)

P
1/4
1/4
1/4
1/4

Table 4.2: Joint distribution of (Order, l)
Then follows the marginal distribution of content length:
P (Y = y) =

W P (x, y)
x∈X

y
5
8
9

P
1/4
1/4
1/2

Table 4.3: Marginal distribution of l
17

(4.3)

Finally we can construct the leakage channel using Bayes’ theorem:
P (x|y) =

P (x)P (y|x)
P (y)

(4.4)

W −1 (x|y) ”AMERICANO” ”CAPPUCINO” ”ESPRESSO” ”MOCHA”
5
1
8
1
9
1/2
1/2
Table 4.4: Leakage channel of Length - Order
The same strategy can also be applied on the second packet: Order||F lavour.
Example 4.3.2. The first step is to compute the Content-Length channel.
Analysis on Order||F lavour packet is more complicated as it has a larger
entropy.
We omit the sequence of SUGAR and MILK to simplify the problem. We
also simplify our notation by denoting D1 as the degree of SUGAR and D2
the degree of MILK. Then any F lavour can be represented as (D1 , D2 ), e.g.
(2, 1) represents any F lavour that has a degree of SUGAR 2 and degree of
MILK 1.
The same strategy can be applied directly on this example as well. However, the space of this channel is much more complicated in this case which
are 4
It is sometimes possible to simplify the problem by breaking the PlaintextLength channel into several sub-channels, namely Order channel W0 (y ∈
l|x ∈ COF F EE), SUGAR channel W1 (y ∈ l|x ∈ D1 ) and MILK channel
W2 (y ∈ l|x ∈ D2 ) in this application. These sub-channels requires less computation and we will show how to reconstruct the Plaintext-Length channel
using these sub-channels later in this section.
Obviously that W0 is identical to Table 4.1 as the Order part in Order||F lavour
is simply an echo of the first Order packet.
W2 and W3 are actually identical:

18

W1 (x|y) 0 1 2
0
1
1
1
2
1
3

3

1

P
1/4
1/4
1/4
1/4

W2 (x|y)
0
1
2
3

0 1 2 3
1
1
1
1

P
1/4
1/4
1/4
1/4

Table 4.5: Channels of SUGAR-Length and MILK-Length
Then we merge W1 and W2 to construct the F lavour - Length channel
W1 ⊗ W2 ((y1 , y2 )|(x1 , x2 )) where (y1 , y2 ) ∈ l ⊗ l, (x1 , x2 ) ∈ D1 ⊗ D2 :
W1 ⊗ W2 ((y1 , y2 )|(x1 , x2 )) (0,0) (0,1) ...
(0,0)
1
(0,1)
1
...
(x1 , x2 )
...
(3,2)
(3,3)

(y1 , y2 )

... (3,2) (3,3)

P ((y1 , y2 )|(x1 , x2 ))

P (x1 , x2 )
1
1

Table 4.6: F lavour-Length channel
The right end column of probability is simply the joint probability of both
inputs of W1 and W2 .
In this application, degree of SUGAR and degree of MILK are independent variables. This implies their joint probability is simply the product of
their marginal probabilities:
P (x1 , x2 ) = P (x1 )P (x2 )

(4.5)

Notice that since the output of such channel are actually the length of its
input; therefore for a given input, its output is deterministic, i.e.
P ((y1 , y2 )|(x1 , x2 )) =

1 if y1 = |x1 | and y2 = |x2 |
0 otherwise

(4.6)

The merged channel W1 ⊗W2 results in a table with size of (|X1 ||X2 |) rows
and (|Y1 ||Y2 |) columns. This implies that the merge operation of two channels
19

P
1/16
1/16

1/16
1/16

will potentially has an exponential time and space complexity. However, this
can be improved by compressing the channel.
The first thing is that the merged output are actually lengths of both
inputs; hence (y1 , y2 ) can be replaced by their sum: y = y1 + y2 . Therefore
Table 4.6 can be compressed by combing columns with a same length, i.e.
we can merge columns into one if (y1 + y2 ) = (y1 + y2 ). The combination is
simply the vector sum of two columns
So we can reconstruct W1 ⊗ W2 as:
(W1 ⊗ W2 ) (y = y1 + y2 |(x1 , x2 )) 0 1
(0,0)
1
(0,1)
1
...
(1,0)
1
...
(3,2)
(3,3)

2 3 4 5 6

1
1

P
1/16
1/16

1/16
1/16

Table 4.7: Compressed F lavour-Length channel
In Table 4.7, we can see that different inputs can map to the same length,
e.g. (0, 1) and (1, 0) all results to l = 1.
Practically, we can further compress this channel with the cost of resolution of input. Generally, there are some facts that worth notice:
• As in (4.6), length is deterministic given a content. Therefore it is a
reasonable choice to merge contents which will result into same length.
• The intuition of combing two rows with the same length can be interpreted as follow: for two rows with the same output W (y|x = x1 ) and
W (y|x = x2 ), the merged row represents W (y|x = x1 or x = x2 ).
• For such a channel, each input are exclusive events; thus the probability
of the input of merged rows is simply the sum of the probability of each
row: P (xmerged ) = P (x1 ) + P (x2 )
So if we compress Table 4.7 by the same (y1 +y2 ) which is indeed |F lavour|,
we will have a further compressed W1 ⊗ W2 :
20

(W1 ⊗ W2 ) (y = y1 + y2 |x = x1 + x2 ) 0
0
1
1
2
3
4
5
6

1 2 3 4 5 6
1
1
1
1
1
1

P
1/16
1/8
3/16
1/4
3/16
1/8
1/16

Table 4.8: Further Compressed (with less resolution) F lavour-Length channel
The actual degree of SUGAR and MILK are lost in Table 4.8 during this
compression, but it also reduced the number of rows from 161 to 7.
By applying the same strategy again to merge the Order channel W0
with (W1 ⊗ W2 ), we will have the OrderF lavour-Length channel W = W0 ⊗
W1 ⊗ W2 . Then finally as described in Example 4.3.1, we can construct the
leakage channel W −1 (x|y) (see Appendix A) for the OrderF lavour packets .
To generalise, given the distribution of the plaintext, the leakage channel
is constructed as following:
1 If the space of plaintext is large, break the plaintext-length channel into
several sub-channels.
2 Compute the sub-channels and compress them. Resolution may lost during
the compression.
3 Merge the sub-channels to construct the plaintext-length channel.
4 Use Bayes’ Theorem to invert plaintext-length channel.
Another aspect to view such leakage channel is to analyse its capacity, i.e.
the maximum mutual information of content and length, described in [7].
[Experiment results...(from Baikal?)]
1

(W1 ⊗ W2 ) has 4 × 4 = 16 rows.

21

4.3.5

Guessing Plaintext Using Joint Packet Length

In Section 4.3.4 we described a method of packet analysis against a single
packet in a session. It is possible to improve the analysis by looking at the
packets jointly. As presented in [7], the sequence of packets lengths can be
viewed as a vector.

Figure 4.5: Captured Leaky Coffee packets
Example 4.3.3. For example, a 2-packets session (packet No 86 and 87) has
been marked out in Figure 4.5. The values of DTLS Length are both 25 as
marked in red rectangle. Their actual plaintext length can then be computed
as 8 and 8 bytes respectively by Equation (4.1).
It is possible to do the single packet analysis described in Section 4.3.4
on each of these packets. We immediately know that plaintext in the first
packet is “ESPRESSO”; whilst the second one could be either “ESPRESSO”
or “MOCHA” with a F lavour of length 3. However, the analysis of the
second packet is in fact unnecessary at all as the application specifies that
an “ESPRESSO” Order can only be responded with an “ESPRESSO” with
NULL F lavour.
22

The application specifies that the first part of the Order||F lavour simply
echoes the first packet; therefore in fact we can immediately tell that the
second packet is “ESPRESSO”.
One way to model this is to “expand” the channel. Instead of using the
content at each packet from as the input, we can write them as a vector:
x =< x1 , x2 , ..., xn >
and similarly, we can also write their length as another vector:
l =< y1 , y2 , ..., yn >
Then we can use the same strategy in Section 4.3.4 to construct the
leakage channel W −1 (X, Y ) where x ∈ X and y ∈ Y .
A problem in this method is the resulting channel is of the size of the
Cartesian product of all contents in every packet. However, in this Leaky
Coffee application most of the cells is actually 0 which could be used to reduce
its storage space; but such optimisation is heavily application dependant.
There are several other ways might be used to utilise joint packet length,
such as machine learning. However, in this “intentionally crafted” Leaky
Coffee application, the first packet seems always enough to reveal (roughly)
the rest of plaintext in a session.

23

Chapter 5
Plan

24

Appendix A
OrderF lavour-Length leakage
channel
In this application, the joint probability of Order and F lavour are simply
the product of their marginal probability. However, since “ESPRESSO” will
always followed by F lavour of of both degree of SUGAR and MILK being
0(see Section 4.2.1); hence
P (x1 , x2 |“ESPRESSO”) =

1 if x1 = x2 = 0
0 otherwise

Therefore
P (“ESPRESSO”, x1 , x2 ) =

25

1/4 if x1 = x2 = 0
0
otherwise

Bibliography
[1] tinydtls. http://tinydtls.sourceforge.net/.
[2] Bernstein, D. J.
Cache-timing attacks on AES.
http://cr.yp.to/papers.html#cachetiming.

URL:

[3] Deering, S., and Hinden, R. RFC 2460 Internet Protocol, Version 6
(IPv6) Specification. Internet Engineering Task Force, December 1998.
[4] for Standardization ISO, I. O. ISO/IEC 7498-1Information technology - Open Systems Interconnection - Basic Reference Model: The
Basic Model. Tech. rep., June 1994.
[5] Internet Engineering Task Force. RFC 791 Internet Protocol DARPA Inernet Programm, Protocol Specification, September 1981.
[6] Mangard, S., Oswald, E., and Popp, T. Power analysis attacks revealing the secrets of smart cards. Springer, 2007.
[7] Mather, L., and Oswald, E. Pinpointing side-channel information
leaks in web applications. J. Cryptographic Engineering 2, 3 (2012), 161–
177.
[8] Osvik, D. A., Shamir, A., and Tromer, E. Cache attacks and
countermeasures: the case of aes. IACR Cryptology ePrint Archive 2005
(2005), 271.

26

